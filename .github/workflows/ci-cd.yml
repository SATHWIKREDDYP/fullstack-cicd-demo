name: CI/CD Pipeline for Fullstack App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job for creating ECR repositories (if not already created)
  create-ecr-repositories:
    runs-on: ubuntu-latest
    steps:
      - name: Set up AWS credentials for ECR creation
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repositories for Frontend and Backend
        run: |
          aws ecr create-repository --repository-name frontend --region ${{ secrets.AWS_REGION }} || echo "Frontend ECR repository already exists"
          aws ecr create-repository --repository-name backend --region ${{ secrets.AWS_REGION }} || echo "Backend ECR repository already exists"

  # Job for building Docker images and pushing to ECR
  build-and-push:
    runs-on: ubuntu-latest
    needs: create-ecr-repositories
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials for ECR authentication
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Amazon ECR before pushing images
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push frontend Docker image
        run: |
          cd frontend
          npm install
          docker build -t frontend .
          docker tag frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest

      - name: Build and push backend Docker image
        run: |
          cd backend
          npm install
          docker build -t backend .
          docker tag backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest

  # Job for deploying infrastructure using CloudFormation
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Set up AWS credentials for CloudFormation deployment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
# Step to list files in the repository to ensure cloudformation.yaml exists
      - name: List files in the repository
        run: |
          echo "Listing files to verify cloudformation.yaml exists"
          ls -R

      - name: Deploy Infrastructure with CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file ./infrastructure/cloudformation.yaml \
            --stack-name fullstack-app-stack \
            --parameter-overrides \
              FrontendImageURI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest \
              BackendImageURI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest \
              VPCId=vpc-0ffe1ed38985de182 \
              FrontendSubnetId=subnet-04ccebd195db80010 \
              BackendSubnetId=subnet-04ccebd195db80010 \
              SecurityGroupId=sg-0834e1746d798a82e \
            --capabilities CAPABILITY_IAM

  # Job for updating ECS Services after new image push
  ecs-update:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - name: Set up AWS credentials for ECS update
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS Frontend Service
        run: |
          aws ecs update-service \
            --cluster fullstack-app-cluster \
            --service frontend-service \
            --force-new-deployment

      - name: Update ECS Backend Service
        run: |
          aws ecs update-service \
            --cluster fullstack-app-cluster \
            --service backend-service \
            --force-new-deployment


name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Lint and Test Backend
  lint-test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Run tests
        run: |
          cd backend
          npm test

  # Build and Push Docker Images
  build-push:
    runs-on: ubuntu-latest
    needs: lint-test-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Backend Docker Image
        run: |
          cd backend
          docker build -t backend .
          docker tag backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest

      - name: Build and Push Frontend Docker Image
        run: |
          cd frontend
          docker build -t frontend .
          docker tag frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest

  # Deploy to ECS Fargate
  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS Frontend service
        run: |
          # Updating ECS service with the new image tags
          ecs_service_name=frontend-service
          cluster_name=fullstack-app
          aws ecs update-service --cluster $cluster_name --service $ecs_service_name --force-new-deployment
      - name: Update ECS Backend Service
        run: |
          #updating backend
          ecs_service_name=backend-service
          cluster_name=fullstack-app
          aws ecs update-service --cluster $cluster_name --service $ecs_service_name --force-new-deployment
